{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\git\\\\my-app\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\"; // React와 관련된 훅(hooks)을 가져옵니다.\nimport \"./App.css\"; // 스타일링을 위한 CSS 파일을 가져옵니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [boxofficeType, setMessage] = useState(\"\"); // 상태(state)를 정의하고 초기값을 빈 문자열로 설정합니다.\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 서버로부터 데이터를 가져옵니다.\n    fetch(\"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=82ca741a2844c5c180a208137bb92bd7&targetDt=20120101\") // 서버의 API 엔드포인트에 요청을 보냅니다.\n    .then(response => response.json()) // 응답을 JSON 형식으로 파싱합니다.\n    .then(data => setMessage(data.message)); // 상태를 서버에서 받은 메시지로 업데이트합니다.\n  }, []); // 빈 배열을 의존성 배열로 제공하여 이 효과가 컴포넌트 마운트 시 한 번만 실행되도록 합니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: boxofficeType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nkvlSG/FGj35znfY9Gyuz/s5nT8=\");\n_c = App;\nexport default App; // App 컴포넌트를 내보냅니다.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","boxofficeType","setMessage","fetch","then","response","json","data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/git/my-app/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"; // React와 관련된 훅(hooks)을 가져옵니다.\nimport \"./App.css\"; // 스타일링을 위한 CSS 파일을 가져옵니다.\n\nfunction App() {\n  const [boxofficeType, setMessage] = useState(\"\"); // 상태(state)를 정의하고 초기값을 빈 문자열로 설정합니다.\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 서버로부터 데이터를 가져옵니다.\n    fetch(\n      \"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=82ca741a2844c5c180a208137bb92bd7&targetDt=20120101\"\n    ) // 서버의 API 엔드포인트에 요청을 보냅니다.\n      .then((response) => response.json()) // 응답을 JSON 형식으로 파싱합니다.\n      .then((data) => setMessage(data.message)); // 상태를 서버에서 받은 메시지로 업데이트합니다.\n  }, []); // 빈 배열을 의존성 배열로 제공하여 이 효과가 컴포넌트 마운트 시 한 번만 실행되도록 합니다.\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>{boxofficeType}</h1> {/* 상태에 저장된 메시지를 화면에 출력합니다. */}\n      </header>\n    </div>\n  );\n}\n\nexport default App; // App 컴포넌트를 내보냅니다.\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO,CAAC,CAAC;AACpD,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDD,SAAS,CAAC,MAAM;IACd;IACAQ,KAAK,CACH,gJACF,CAAC,CAAC;IAAA,CACCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACpCF,IAAI,CAAEG,IAAI,IAAKL,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEV,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBZ,OAAA;MAAQW,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BZ,OAAA;QAAAY,QAAA,EAAKT;MAAa;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACd,EAAA,CAnBQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAqBZ,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}